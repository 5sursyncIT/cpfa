.PHONY: help install start stop restart logs clean test wp shell db backup restore

# Couleurs pour l'affichage
BLUE := \033[0;34m
GREEN := \033[0;32m
RED := \033[0;31m
NC := \033[0m # No Color

help: ## Affiche cette aide
	@echo "$(BLUE)CPFA WordPress Plugin System - Commandes Docker$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(BLUE)Exemples d'utilisation:$(NC)"
	@echo "  make install    # Premi√®re installation"
	@echo "  make start      # D√©marrer les services"
	@echo "  make logs       # Voir les logs"
	@echo "  make wp ARGS='plugin list'  # Utiliser WP-CLI"

install: ## Installation compl√®te (WordPress + Plugin)
	@echo "$(BLUE)üöÄ Installation WordPress + CPFA...$(NC)"
	@./setup-wordpress.sh

start: ## D√©marrer tous les services
	@echo "$(BLUE)‚ñ∂Ô∏è  D√©marrage des services...$(NC)"
	@docker-compose up -d
	@echo "$(GREEN)‚úì Services d√©marr√©s$(NC)"
	@echo ""
	@echo "WordPress:   http://localhost:8080"
	@echo "Admin:       http://localhost:8080/wp-admin"
	@echo "phpMyAdmin:  http://localhost:8081"
	@echo "MailHog:     http://localhost:8025"

stop: ## Arr√™ter tous les services
	@echo "$(BLUE)‚èπÔ∏è  Arr√™t des services...$(NC)"
	@docker-compose down
	@echo "$(GREEN)‚úì Services arr√™t√©s$(NC)"

restart: ## Red√©marrer tous les services
	@echo "$(BLUE)üîÑ Red√©marrage des services...$(NC)"
	@docker-compose restart
	@echo "$(GREEN)‚úì Services red√©marr√©s$(NC)"

logs: ## Voir les logs (Ctrl+C pour quitter)
	@docker-compose logs -f

logs-wp: ## Voir les logs WordPress uniquement
	@docker-compose logs -f wordpress

logs-db: ## Voir les logs MySQL uniquement
	@docker-compose logs -f db

ps: ## Liste des containers actifs
	@docker-compose ps

shell: ## Acc√®s shell WordPress
	@docker-compose exec wordpress bash

shell-db: ## Acc√®s shell MySQL
	@docker-compose exec db bash

wp: ## Ex√©cuter une commande WP-CLI (usage: make wp ARGS='plugin list')
	@docker-compose run --rm wpcli $(ARGS)

db-connect: ## Se connecter √† MySQL
	@docker-compose exec db mysql -u wordpress -pwordpress wordpress

backup: ## Backup de la base de donn√©es
	@echo "$(BLUE)üíæ Backup de la base de donn√©es...$(NC)"
	@mkdir -p backups
	@docker-compose exec -T db mysqldump -u wordpress -pwordpress wordpress > backups/backup_$$(date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úì Backup cr√©√© dans backups/$(NC)"

restore: ## Restaurer le dernier backup (usage: make restore FILE=backup.sql)
	@echo "$(BLUE)üì• Restauration de la base de donn√©es...$(NC)"
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)‚úó Erreur: Sp√©cifier le fichier avec FILE=backup.sql$(NC)"; \
		exit 1; \
	fi
	@docker-compose exec -T db mysql -u wordpress -pwordpress wordpress < $(FILE)
	@echo "$(GREEN)‚úì Base de donn√©es restaur√©e$(NC)"

clean: ## Nettoyer les containers et volumes
	@echo "$(RED)‚ö†Ô∏è  Suppression de tous les containers et volumes...$(NC)"
	@read -p "√ätes-vous s√ªr? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		docker-compose down -v; \
		echo "$(GREEN)‚úì Nettoyage termin√©$(NC)"; \
	fi

reset: clean install ## Reset complet et r√©installation

plugin-activate: ## Activer le plugin CPFA
	@docker-compose run --rm wpcli plugin activate cpfa-core-manager
	@echo "$(GREEN)‚úì Plugin activ√©$(NC)"

plugin-deactivate: ## D√©sactiver le plugin CPFA
	@docker-compose run --rm wpcli plugin deactivate cpfa-core-manager
	@echo "$(GREEN)‚úì Plugin d√©sactiv√©$(NC)"

plugin-list: ## Liste des plugins install√©s
	@docker-compose run --rm wpcli plugin list

test-api: ## Tester les endpoints REST API
	@echo "$(BLUE)üß™ Test des endpoints REST API...$(NC)"
	@echo ""
	@echo "Formations:"
	@curl -s http://localhost:8080/wp-json/cpfa/v1/formations | jq -r '.[].title' 2>/dev/null || echo "  Aucune formation"
	@echo ""
	@echo "S√©minaires:"
	@curl -s http://localhost:8080/wp-json/cpfa/v1/seminaires | jq -r '.[].title' 2>/dev/null || echo "  Aucun s√©minaire"
	@echo ""
	@echo "Stats:"
	@curl -s http://localhost:8080/wp-json/cpfa/v1/stats | jq 2>/dev/null || echo "  Erreur"

test-data: ## Cr√©er des donn√©es de test
	@echo "$(BLUE)üìù Cr√©ation de donn√©es de test...$(NC)"
	@docker-compose run --rm wpcli post create \
		--post_type=cpfa_formation \
		--post_title="Formation Test $$(date +%H%M%S)" \
		--post_status=publish
	@echo "$(GREEN)‚úì Formation cr√©√©e$(NC)"

elementor-install: ## Installer Elementor
	@docker-compose run --rm wpcli plugin install elementor --activate
	@echo "$(GREEN)‚úì Elementor install√©$(NC)"

flush-cache: ## Vider le cache WordPress
	@docker-compose run --rm wpcli cache flush
	@docker-compose run --rm wpcli rewrite flush
	@echo "$(GREEN)‚úì Cache vid√©$(NC)"

debug-enable: ## Activer le mode debug
	@docker-compose run --rm wpcli config set WP_DEBUG true --raw
	@docker-compose run --rm wpcli config set WP_DEBUG_LOG true --raw
	@echo "$(GREEN)‚úì Debug activ√©$(NC)"

debug-disable: ## D√©sactiver le mode debug
	@docker-compose run --rm wpcli config set WP_DEBUG false --raw
	@docker-compose run --rm wpcli config set WP_DEBUG_LOG false --raw
	@echo "$(GREEN)‚úì Debug d√©sactiv√©$(NC)"

debug-log: ## Voir le fichier debug.log
	@docker-compose exec wordpress tail -f /var/www/html/wp-content/debug.log

composer-install: ## Installer les d√©pendances Composer
	@echo "$(BLUE)üì¶ Installation des d√©pendances Composer...$(NC)"
	@composer install
	@echo "$(GREEN)‚úì D√©pendances install√©es$(NC)"

phpcs: ## V√©rifier les standards WordPress
	@echo "$(BLUE)üîç V√©rification des standards WordPress...$(NC)"
	@vendor/bin/phpcs --standard=WordPress cpfa-core-manager/

phpcbf: ## Corriger automatiquement les standards
	@echo "$(BLUE)üîß Correction automatique...$(NC)"
	@vendor/bin/phpcbf --standard=WordPress cpfa-core-manager/

info: ## Afficher les informations syst√®me
	@echo "$(BLUE)‚ÑπÔ∏è  Informations syst√®me$(NC)"
	@echo ""
	@echo "Docker:"
	@docker --version
	@echo ""
	@echo "Docker Compose:"
	@docker-compose --version
	@echo ""
	@echo "Containers actifs:"
	@docker-compose ps
	@echo ""
	@echo "Volumes:"
	@docker volume ls | grep cpfa || echo "  Aucun volume"
	@echo ""
	@echo "WordPress:"
	@docker-compose run --rm wpcli core version 2>/dev/null || echo "  Non install√©"

open: ## Ouvrir WordPress dans le navigateur
	@echo "$(BLUE)üåê Ouverture de WordPress...$(NC)"
	@if command -v xdg-open > /dev/null; then \
		xdg-open http://localhost:8080; \
	elif command -v open > /dev/null; then \
		open http://localhost:8080; \
	else \
		echo "Ouvrez manuellement: http://localhost:8080"; \
	fi

open-admin: ## Ouvrir l'admin WordPress
	@echo "$(BLUE)üåê Ouverture de l'admin...$(NC)"
	@if command -v xdg-open > /dev/null; then \
		xdg-open http://localhost:8080/wp-admin; \
	elif command -v open > /dev/null; then \
		open http://localhost:8080/wp-admin; \
	else \
		echo "Ouvrez manuellement: http://localhost:8080/wp-admin"; \
	fi

urls: ## Afficher toutes les URLs
	@echo "$(BLUE)üåê URLs disponibles:$(NC)"
	@echo ""
	@echo "  WordPress:     http://localhost:8080"
	@echo "  Admin:         http://localhost:8080/wp-admin"
	@echo "  phpMyAdmin:    http://localhost:8081"
	@echo "  MailHog:       http://localhost:8025"
	@echo "  REST API:      http://localhost:8080/wp-json/cpfa/v1/"
	@echo ""
	@echo "$(BLUE)Identifiants:$(NC)"
	@echo "  User:          admin"
	@echo "  Password:      admin123"
